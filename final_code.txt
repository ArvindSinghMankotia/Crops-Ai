#include <WiFi.h>
#include <WebServer.h>
#include <DHT.h>
#include <HTTPClient.h>
#include <SPIFFS.h>
#include <ArduinoJson.h>

const char* ssid = "ketox";  
const char* password = "";  
const char* weatherApiKey = "66bc6dc00aa6c882b37801e36968757c"; 
const char* geminiApiKey = "AIzaSyDccW7_NuAU8ThIqmzD5-qDICqosIs5NJU"; 
const char* geminiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent";

WebServer server(80);

#define DHTPIN 4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

#define SOIL_MOISTURE_PIN 34
#define LED_BUILTIN 2

bool ledState = false;
int manualMoistureValue = 50;  // Default manual moisture value
bool manualModeEnabled = false;  // Flag to control manual mode

struct CropData {
  String cropType;
  String location;
  String plantingDate;
};
CropData crops[10];
int cropCount = 0;

void setupSPIFFS() {
  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS Mount Failed");
    return;
  }
  loadCropData();
}

void loadCropData() {
  File file = SPIFFS.open("/crops.json", "r");
  if (!file) return;

  DynamicJsonDocument doc(512);
  deserializeJson(doc, file);
  cropCount = doc["count"];
  for (int i = 0; i < cropCount; i++) {
    crops[i].cropType = doc["crops"][i]["type"].as<String>();
    crops[i].location = doc["crops"][i]["location"].as<String>();
    crops[i].plantingDate = doc["crops"][i]["date"].as<String>();
  }
  file.close();
}

void saveCropData() {
  File file = SPIFFS.open("/crops.json", "w");
  if (!file) return;

  DynamicJsonDocument doc(512);
  doc["count"] = cropCount;
  JsonArray cropArray = doc.createNestedArray("crops");
  for (int i = 0; i < cropCount; i++) {
    JsonObject crop = cropArray.createNestedObject();
    crop["type"] = crops[i].cropType;
    crop["location"] = crops[i].location;
    crop["date"] = crops[i].plantingDate;
  }
  serializeJson(doc, file);
  file.close();
}

String getSensorData() {
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();

  static int lastMoisture = 25;  // Start at middle of 0-50 range
  int soilMoisturePercent;
  
  if (manualModeEnabled) {
    // Use manually set value
    soilMoisturePercent = manualMoistureValue;
  } else {
    // Simulate soil moisture based on temperature and humidity
    // Higher temperature -> lower moisture (due to evaporation)
    // Higher humidity -> higher moisture (due to less evaporation)
    float tempEffect = (25 - temperature) / 5;  // Temperature effect (25°C is neutral)
    float humEffect = (humidity - 50) / 8;      // Humidity effect (50% is neutral)
    
    // Calculate new moisture with some natural variation
    // Add small random variation (-1 to +1)
    soilMoisturePercent = lastMoisture + tempEffect + humEffect + random(-1, 2);
    
    // Keep within 0-50 range for normal mode
    soilMoisturePercent = constrain(soilMoisturePercent, 0, 50);
    
    // Simulate moisture loss over time (very slow drain)
    if (random(100) < 20) {  // 20% chance to decrease
      soilMoisturePercent = max(0, soilMoisturePercent - 1);
    }
    
    // If motor is on, increase moisture
    if (ledState) {
      soilMoisturePercent = min(50, soilMoisturePercent + 2);
    }
    
    lastMoisture = soilMoisturePercent;
  }
  
  // Debug sensor readings
  Serial.print("Temperature: ");
  Serial.print(temperature, 1);
  Serial.print(" °C | Humidity: ");
  Serial.print(humidity, 1);
  Serial.print(" % | ");
  Serial.print(manualModeEnabled ? "Manual" : "Simulated");
  Serial.print(" Soil Moisture: ");
  Serial.print(soilMoisturePercent);
  Serial.println("%");

  if (isnan(temperature) || isnan(humidity)) {
    return "{\"error\": \"DHT sensor reading failed\"}";
  }

  // Create JSON string
  String data = "{";
  data += "\"temperature\": " + String(temperature, 1) + ",";
  data += "\"humidity\": " + String(humidity, 1) + ",";
  data += "\"soil_moisture\": " + String(soilMoisturePercent) + ",";
  data += "\"manual_mode\": " + String(manualModeEnabled ? "true" : "false") + ",";
  data += "\"motor_state\": " + String(ledState ? "true" : "false");
  data += "}";
  return data;
}


String getWeatherData(String location) {
  HTTPClient http;
  String url = "http://api.openweathermap.org/data/2.5/weather?q=" + location + "&appid=" + String(weatherApiKey) + "&units=metric";
  http.begin(url);
  http.setTimeout(10000);
  int httpCode = http.GET();
  String payload = "{}";
  if (httpCode == HTTP_CODE_OK) {
    payload = http.getString();
  } else {
    Serial.println("Weather API failed, code: " + String(httpCode));
    payload = "{\"error\": \"Weather data unavailable, code: " + String(httpCode) + "\"}";
  }
  http.end();
  return payload;
}

String getCropData(String cropType, String location) {
  String cropData = "{}";
  for (int i = 0; i < cropCount; i++) {
    if (crops[i].cropType == cropType && crops[i].location == location) {
      cropData = "{\"type\": \"" + crops[i].cropType + "\", \"location\": \"" + crops[i].location + "\", \"plantingDate\": \"" + crops[i].plantingDate + "\"}";
      break;
    }
  }
  return cropData;
}

String getAISuggestions(String cropType, String location) {
  HTTPClient http;
  Serial.println("\n--- Starting AI Request ---");
  Serial.println("Crop Type: " + cropType);
  Serial.println("Location: " + location);
  
  // Get sensor and weather data
  String sensorData = getSensorData();
  String weatherData = getWeatherData(location);
  String cropData = getCropData(cropType, location);
  
  Serial.println("Sensor Data: " + sensorData);
  Serial.println("Weather Data: " + weatherData);
  Serial.println("Crop Data: " + cropData);

  // Construct the API URL with key
  String url = String(geminiUrl) + "?key=" + String(geminiApiKey);
  Serial.println("API URL: " + url);
  
  http.begin(url);
  http.setTimeout(15000);  // 15 second timeout
  http.addHeader("Content-Type", "application/json");

  // Construct the prompt
  String prompt = "You are an AI agricultural expert. Given the following data:\n"
                 "- Sensor Data: " + sensorData + "\n"
                 "- Weather Data: " + weatherData + "\n"
                 "- Crop Data: " + cropData + "\n\n"
                 "Provide smart irrigation and farming suggestions. Format your response EXACTLY as follows:\n"
                 "**Suggestions**\n"
                 "[List your general suggestions here, each starting with *]\n\n"
                 "**Must Do**\n"
                 "[List critical actions here, each starting with *]\n\n"
                 "**Should You Water the Fields Now (Yes/No)**\n"
                 "[Answer YES or NO in capital letters]";

  // Create JSON request body
  DynamicJsonDocument requestDoc(2048);  // Increased buffer size
  requestDoc["contents"][0]["parts"][0]["text"] = prompt;
  
  String requestBody;
  serializeJson(requestDoc, requestBody);
  Serial.println("Request Body: " + requestBody);

  // Make the API call
  int httpCode = http.POST(requestBody);
  Serial.println("HTTP Response Code: " + String(httpCode));
  
  String response;
  if (httpCode == HTTP_CODE_OK) {
    String rawResponse = http.getString();
    Serial.println("Raw Response: " + rawResponse);

    DynamicJsonDocument resDoc(4096);  // Increased buffer size for response
    DeserializationError error = deserializeJson(resDoc, rawResponse);
    
    if (!error && resDoc.containsKey("candidates") && 
        resDoc["candidates"][0].containsKey("content") && 
        resDoc["candidates"][0]["content"].containsKey("parts") && 
        resDoc["candidates"][0]["content"]["parts"][0].containsKey("text")) {
      
      String suggestions = resDoc["candidates"][0]["content"]["parts"][0]["text"].as<String>();
      Serial.println("Parsed Suggestions: " + suggestions);
      
      DynamicJsonDocument outDoc(4096);
      outDoc["suggestions"] = suggestions;
      outDoc["sensorData"] = sensorData;
      serializeJson(outDoc, response);
    } else {
      response = "{\"error\":\"Failed to parse AI response: " + String(error.c_str()) + "\",\"sensorData\":" + sensorData + "}";
      Serial.println("Parse Error: " + String(error.c_str()));
      Serial.println("Response Structure Invalid");
    }
  } else {
    response = "{\"error\":\"AI API failed with code: " + String(httpCode) + "\",\"sensorData\":" + sensorData + "}";
    Serial.println("HTTP Request Failed");
  }

  Serial.println("Final Response: " + response);
  Serial.println("--- AI Request Complete ---\n");
  
  http.end();
  return response;
}

String htmlPart1 = R"rawliteral(
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Irrigation Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary-color: #2196F3;
            --success-color: #4CAF50;
            --warning-color: #FFC107;
            --danger-color: #f44336;
            --text-color: #333;
            --bg-color: #f5f7fa;
        }
        
        body { 
            font-family: 'Segoe UI', Arial, sans-serif; 
            background: var(--bg-color); 
            margin: 0; 
            padding: 20px;
            color: var(--text-color);
        }
        
        .container { 
            max-width: 1200px; 
            margin: auto; 
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 20px;
            padding: 20px;
        }
        
        .header {
            grid-column: 1 / -1;
            text-align: center;
            padding: 20px;
            background: linear-gradient(135deg, #1e88e5, #1565c0);
            color: white;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        
        .card { 
            background: white; 
            padding: 20px; 
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .card h2 { 
            color: var(--primary-color);
            margin-top: 0;
            font-weight: 500;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
        }
        
        .sensor-value { 
            font-size: 2.5em; 
            font-weight: 300; 
            margin: 20px 0;
            color: var(--primary-color);
        }
        
        button { 
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 25px;
            font-size: 1em;
            cursor: pointer;
            transition: background 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        button:hover {
            background: #1976D2;
        }
        
        input[type="text"], input[type="date"] {
            width: 100%;
            padding: 12px;
            margin: 8px 0;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-sizing: border-box;
            font-size: 1em;
        }
        
        .chart-container {
            position: relative;
            margin: 20px 0;
            height: 200px;
        }
        
        /* AI Suggestions Styling */
        .ai-card {
            grid-column: 1 / -1;
        }
        
        .ai-form {
            display: grid;
            grid-template-columns: 1fr 1fr auto;
            gap: 10px;
            align-items: end;
            margin-bottom: 20px;
        }
        
        .ai-form input {
            margin: 0;
        }
        
        .suggestions-container {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
        }
        
        .suggestion-section {
            margin: 15px 0;
            padding: 15px;
            border-left: 4px solid var(--primary-color);
            background: white;
            border-radius: 0 10px 10px 0;
        }
        
        .suggestion-section h3 {
            color: var(--primary-color);
            margin: 0 0 10px 0;
        }
        
        /* Add Crop Form Styling */
        .crop-form {
            display: grid;
            gap: 10px;
        }
        
        /* Motor Control Styling */
        .motor-status {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 20px;
            margin-top: 10px;
            font-weight: 500;
        }
        
        .motor-on {
            background: var(--success-color);
            color: white;
        }
        
        .motor-off {
            background: #ddd;
            color: var(--text-color);
        }
    </style>
</head>
<body onload="setupCharts()">
    <div class="container">
        <div class="header">
            <h1>🌿 Smart Irrigation Dashboard 🌿</h1>
        </div>
        
        <div class="card">
            <h2>Temperature</h2>
            <p id="tempValue" class="sensor-value">-- °C</p>
            <div class="chart-container">
                <canvas id="tempChart"></canvas>
            </div>
        </div>
        
        <div class="card">
            <h2>Humidity</h2>
            <p id="humValue" class="sensor-value">-- %</p>
            <div class="chart-container">
                <canvas id="humChart"></canvas>
            </div>
        </div>
        
        <div class="card">
            <h2>Soil Moisture</h2>
            <p id="soilValue" class="sensor-value">-- %</p>
            <div class="chart-container">
                <canvas id="soilChart"></canvas>
            </div>
        </div>
        
        <div class="card">
            <h2>Motor Control</h2>
            <button onclick="toggleLED()">Toggle Motor</button>
            <p id="led-status" class="motor-status motor-off">Motor is OFF</p>
        </div>
        
        <div class="card">
            <h2>Add Crop</h2>
            <form id="cropForm" class="crop-form">
                <input type="text" id="cropType" placeholder="Crop Type" required>
                <input type="text" id="location" placeholder="Location" required>
                <input type="date" id="plantingDate" required>
                <button type="submit">Add Crop</button>
            </form>
        </div>
        
        <div class="card ai-card">
            <h2>AI Irrigation Assistant</h2>
            <div class="ai-form">
                <div>
                    <label for="aiCrop">Crop Type</label>
                    <input type="text" id="aiCrop" placeholder="Enter crop type" required>
                </div>
                <div>
                    <label for="aiLocation">Location</label>
                    <input type="text" id="aiLocation" placeholder="Enter location" required>
                </div>
                <button onclick="getSuggestions()">Get Recommendations</button>
            </div>
            <div id="suggestions" class="suggestions-container">
                Click the button to get personalized recommendations
            </div>
        </div>
    </div>
)rawliteral";

String htmlPart2 = R"rawliteral(
    <script>
        let tempData = [], humData = [], soilData = [], timeLabels = [];
        let chart1, chart2, chart3;

        function updateData() {
            fetch('/data')
            .then(response => response.json())
            .then(data => {
                if (data.error) return;
                let now = new Date().toLocaleTimeString();
                
                // Update data arrays
                if (timeLabels.length > 10) {
                    timeLabels.shift();
                    tempData.shift();
                    humData.shift();
                    soilData.shift();
                }
                timeLabels.push(now);
                tempData.push(data.temperature);
                humData.push(data.humidity);
                soilData.push(data.soil_moisture);

                // Update display values
                document.getElementById('tempValue').textContent = `${data.temperature.toFixed(1)} °C`;
                document.getElementById('humValue').textContent = `${data.humidity.toFixed(1)} %`;
                document.getElementById('soilValue').textContent = `${data.soil_moisture} %`;

                // Update all charts
                chart1.data.labels = timeLabels;
                chart2.data.labels = timeLabels;
                chart3.data.labels = timeLabels;
                
                chart1.data.datasets[0].data = tempData;
                chart2.data.datasets[0].data = humData;
                chart3.data.datasets[0].data = soilData;
                
                chart1.update('none');
                chart2.update('none');
                chart3.update('none');
            });
        }

        function setupCharts() {
            const chartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: { color: 'rgba(0,0,0,0.05)' }
                    },
                    x: {
                        grid: { display: false }
                    }
                },
                elements: {
                    line: {
                        tension: 0.4
                    },
                    point: {
                        radius: 2
                    }
                }
            };

            const tempOptions = {...chartOptions};
            tempOptions.scales = {
                ...chartOptions.scales,
                y: {
                    ...chartOptions.scales.y,
                    min: 15,
                    max: 40,
                    ticks: { stepSize: 5 }
                }
            };

            const humOptions = {...chartOptions};
            humOptions.scales = {
                ...chartOptions.scales,
                y: {
                    ...chartOptions.scales.y,
                    min: 0,
                    max: 100,
                    ticks: { stepSize: 20 }
                }
            };

            const soilOptions = {...chartOptions};
            soilOptions.scales = {
                ...chartOptions.scales,
                y: {
                    ...chartOptions.scales.y,
                    min: 0,
                    max: 100,
                    ticks: { 
                        stepSize: 20,
                        callback: function(value) {
                            if (value === 50) {
                                return value + ' (Normal Max)';
                            }
                            return value;
                        }
                    }
                }
            };
            
            let ctx1 = document.getElementById('tempChart').getContext('2d');
            let ctx2 = document.getElementById('humChart').getContext('2d');
            let ctx3 = document.getElementById('soilChart').getContext('2d');
            
            chart1 = new Chart(ctx1, {
                type: 'line',
                data: {
                    labels: timeLabels,
                    datasets: [{
                        label: 'Temperature',
                        data: tempData,
                        borderColor: '#f44336',
                        backgroundColor: 'rgba(244, 67, 54, 0.1)',
                        fill: true
                    }]
                },
                options: tempOptions
            });
            
            chart2 = new Chart(ctx2, {
                type: 'line',
                data: {
                    labels: timeLabels,
                    datasets: [{
                        label: 'Humidity',
                        data: humData,
                        borderColor: '#2196F3',
                        backgroundColor: 'rgba(33, 150, 243, 0.1)',
                        fill: true
                    }]
                },
                options: humOptions
            });
            
            chart3 = new Chart(ctx3, {
                type: 'line',
                data: {
                    labels: timeLabels,
                    datasets: [{
                        label: 'Soil Moisture',
                        data: soilData,
                        borderColor: '#4CAF50',
                        backgroundColor: 'rgba(76, 175, 80, 0.1)',
                        fill: true
                    }]
                },
                options: soilOptions
            });
            
            // Update every 5 seconds
            setInterval(updateData, 5000);
            updateData();
        }

        function toggleLED() {
            fetch('/toggle')
            .then(response => response.text())
            .then(data => {
                let status = document.getElementById('led-status');
                status.textContent = data;
                status.className = data.includes('ON') ? 
                    'motor-status motor-on' : 'motor-status motor-off';
            });
        }

        function formatSuggestions(suggestions) {
            try {
                // Split into main sections
                let sections = suggestions.split('\n\n');
                let html = '<div class="ai-suggestions">';
                
                sections.forEach(section => {
                    if (section.trim()) {
                        if (section.startsWith('**Suggestions**')) {
                            // Handle main suggestions section
                            let points = section.split('*').filter(p => p.trim());
                            html += `
                                <div class="suggestion-section">
                                    <h3>📋 Suggestions</h3>
                                    <div class="suggestion-list">
                                        ${points.slice(1).map(point => `
                                            <div class="suggestion-item">
                                                ${point.replace(/\*\*/g, '').trim()}
                                            </div>
                                        `).join('')}
                                    </div>
                                </div>
                            `;
                        } 
                        else if (section.startsWith('**Must Do**')) {
                            // Handle must-do section
                            let points = section.split('*').filter(p => p.trim());
                            html += `
                                <div class="suggestion-section must-do">
                                    <h3>⚠️ Must Do</h3>
                                    <div class="suggestion-list">
                                        ${points.slice(1).map(point => `
                                            <div class="suggestion-item">
                                                ${point.replace(/\*\*/g, '').trim()}
                                            </div>
                                        `).join('')}
                                    </div>
                                </div>
                            `;
                        }
                        else if (section.startsWith('**Should You Water')) {
                            // Handle water decision section
                            let decision = section.includes('YES') ? 'YES' : 'NO';
                            let colorClass = decision === 'YES' ? 'water-yes' : 'water-no';
                            html += `
                                <div class="suggestion-section water-decision ${colorClass}">
                                    <h3>💧 Watering Decision</h3>
                                    <div class="decision-text">${decision}</div>
                                </div>
                            `;
                        }
                    }
                });
                
                html += '</div>';
                return html;
            } catch (e) {
                return suggestions;
            }
        }

        function getSuggestions() {
            let crop = document.getElementById('aiCrop').value;
            let location = document.getElementById('aiLocation').value;
            
            // Validate inputs
            if (!crop || !location) {
                document.getElementById('suggestions').innerHTML = 
                    '<div class="suggestion-section error">' +
                    '<h3>⚠️ Error</h3>' +
                    '<p>Please enter both crop type and location</p>' +
                    '</div>';
                return;
            }
            
            // Show loading state
            document.getElementById('suggestions').innerHTML = 
                '<div class="suggestion-section loading">' +
                '<h3>🔄 Processing</h3>' +
                '<p>Getting AI recommendations...</p>' +
                '<div class="loading-spinner"></div>' +
                '</div>';
            
            // Disable the button during request
            const button = document.querySelector('button[onclick="getSuggestions()"]');
            button.disabled = true;
            button.innerHTML = '🔄 Processing...';
            
            fetch(`/suggestions?crop=${encodeURIComponent(crop)}&location=${encodeURIComponent(location)}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.error) {
                    document.getElementById('suggestions').innerHTML = 
                        '<div class="suggestion-section error">' +
                        '<h3>⚠️ Error</h3>' +
                        '<p>' + data.error + '</p>' +
                        '<p>Please try again in a few moments.</p>' +
                        '</div>';
                } else {
                    document.getElementById('suggestions').innerHTML = formatSuggestions(data.suggestions);
                }
            })
            .catch(error => {
                document.getElementById('suggestions').innerHTML = 
                    '<div class="suggestion-section error">' +
                    '<h3>⚠️ Error</h3>' +
                    '<p>Failed to get recommendations: ' + error.message + '</p>' +
                    '<p>Please try again in a few moments.</p>' +
                    '</div>';
            })
            .finally(() => {
                // Re-enable the button
                button.disabled = false;
                button.innerHTML = 'Get Recommendations';
            });
        }

        document.getElementById('cropForm').addEventListener('submit', function(e) {
            e.preventDefault();
            let cropType = document.getElementById('cropType').value;
            let location = document.getElementById('location').value;
            let plantingDate = document.getElementById('plantingDate').value;
            fetch('/addCrop', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ cropType, location, plantingDate })
            }).then(() => {
                alert('Crop added successfully!');
                this.reset();
            });
        });

        // Add loading spinner and error styles
        const extraStyles = document.createElement('style');
        extraStyles.textContent = `
            .suggestion-section.error {
                border-left: 4px solid var(--danger-color);
                background: #fff5f5;
            }
            
            .suggestion-section.error h3 {
                color: var(--danger-color);
            }
            
            .suggestion-section.loading {
                border-left: 4px solid var(--primary-color);
                text-align: center;
            }
            
            .loading-spinner {
                display: inline-block;
                width: 40px;
                height: 40px;
                margin: 20px auto;
                border: 4px solid #f3f3f3;
                border-top: 4px solid var(--primary-color);
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            button:disabled {
                background: #ccc;
                cursor: not-allowed;
            }
        `;
        document.head.appendChild(extraStyles);
    </script>
</body>
</html>
)rawliteral";

void handleRoot() {
  String fullPage = htmlPart1 + htmlPart2;
  server.send(200, "text/html", fullPage);
}

void handleData() {
  server.send(200, "application/json", getSensorData());
}

void handleToggleLED() {
  ledState = !ledState;
  digitalWrite(LED_BUILTIN, ledState ? HIGH : LOW);
  server.send(200, "text/plain", ledState ? "Motor is ON" : "Motor is OFF");
}

void handleAddCrop() {
  if (server.method() == HTTP_POST) {
    DynamicJsonDocument doc(512);
    deserializeJson(doc, server.arg("plain"));
    if (cropCount < 10) {
      crops[cropCount].cropType = doc["cropType"].as<String>();
      crops[cropCount].location = doc["location"].as<String>();
      crops[cropCount].plantingDate = doc["plantingDate"].as<String>();
      cropCount++;
      saveCropData();
      server.send(200, "text/plain", "Crop added");
    } else {
      server.send(400, "text/plain", "Crop limit reached");
    }
  }
}

void handleSuggestions() {
  String crop = server.arg("crop");
  String location = server.arg("location");
  if (crop == "" || location == "") {
    server.send(400, "application/json", "{\"error\": \"Crop type and location required\"}");
    return;
  }
  String response = getAISuggestions(crop, location);
  server.send(200, "application/json", response);
}

void handleSetMoisture() {
  if (server.hasArg("value")) {
    manualMoistureValue = server.arg("value").toInt();
    manualMoistureValue = constrain(manualMoistureValue, 0, 100);
    server.send(200, "text/plain", "OK");
  } else {
    server.send(400, "text/plain", "Missing value parameter");
  }
}

void handleToggleManual() {
  if (server.hasArg("enabled")) {
    manualModeEnabled = (server.arg("enabled") == "true");
    server.send(200, "text/plain", manualModeEnabled ? "Manual mode enabled" : "Manual mode disabled");
  } else {
    server.send(400, "text/plain", "Missing enabled parameter");
  }
}

void setup() {
  Serial.begin(115200);
  dht.begin();
  pinMode(SOIL_MOISTURE_PIN, INPUT);
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);
  setupSPIFFS();

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConnected! ESP32 IP: " + WiFi.localIP().toString());

  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.on("/toggle", handleToggleLED);
  server.on("/addCrop", handleAddCrop);
  server.on("/suggestions", HTTP_GET, handleSuggestions);
  server.on("/setMoisture", handleSetMoisture);
  server.on("/toggleManual", handleToggleManual);
  server.on("/admin", handleAdmin);
  server.begin();
}

void loop() {
  server.handleClient();
}
